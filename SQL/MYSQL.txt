MYSQL QUERIES


–CRUD OPERATIONS


1.CREATE DATABASE AND TABLE 


CREATE DATABASE soap_store;
        show databases;


        CREATE TABLE cats (
*    name VARCHAR(50),
*    age INT
* );
*  
* CREATE TABLE dogs (
*    name VARCHAR(50),
*    breed VARCHAR(50),
*    age INT
* );


        CREATE TABLE cats2 (
*    name VARCHAR(100) NOT NULL,
*    age INT NOT NULL
* );


        CREATE TABLE unique_cats (
*         cat_id INT PRIMARY KEY,
*    name VARCHAR(100) NOT NULL,
*    age INT NOT NULL
* );
        
        CREATE TABLE unique_cats3 (
*    cat_id INT AUTO_INCREMENT,
*    name VARCHAR(100) NOT NULL,
*    age INT NOT NULL,
*    PRIMARY KEY (cat_id)
* );






2.DROP TABLE:
DROP TABLE cats;


3.INSERT DATA :
INSERT INTO cats (name, age)
* VALUES ('Blue Steele', 5);


        INSERT INTO cats (name, age)
* VALUES
*  ('Meatball', 5),
*  ('Turkey', 1),
*  ('Potato Face', 15);




4.SELECT:
        SELECT * FROM cats;


        SELECT name, age FROM cats WHERE breed='Tabby';


        SELECT cat_id AS id, name FROM cats;


5.UPDATE 
UPDATE cats SET breed='Shorthair' WHERE breed='Tabby';


6.DELETE
        DELETE FROM cats WHERE cat_id=age;






–STRING OPERATIONS:


For string operation create one table and insert some values in it.


* CREATE TABLE books
*         (
*                 book_id INT AUTO_INCREMENT,
*                 title VARCHAR(100),
*                 author_fname VARCHAR(100),
*                 author_lname VARCHAR(100),
*                 released_year INT,
*                 stock_quantity INT,
*                 pages INT,
*                 PRIMARY KEY(book_id)
*         );
*  
* INSERT INTO books (title, author_fname, author_lname, released_year, stock_quantity, pages)
* VALUES
* ('The Namesake', 'Jhumpa', 'Lahiri', 2003, 32, 291),
* ('Norse Mythology', 'Neil', 'Gaiman',2016, 43, 304),
* ('American Gods', 'Neil', 'Gaiman', 2001, 12, 465),
* ('Interpreter of Maladies', 'Jhumpa', 'Lahiri', 1996, 97, 198),
* ('A Hologram for the King: A Novel', 'Dave', 'Eggers', 2012, 154, 352),
* ('The Circle', 'Dave', 'Eggers', 2013, 26, 504),
* ('The Amazing Adventures of Kavalier & Clay', 'Michael', 'Chabon', 2000, 68, 634),
* ('Just Kids', 'Patti', 'Smith', 2010, 55, 304),
* ('A Heartbreaking Work of Staggering Genius', 'Dave', 'Eggers', 2001, 104, 437),
* ('Coraline', 'Neil', 'Gaiman', 2003, 100, 208),
* ('What We Talk About When We Talk About Love: Stories', 'Raymond', 'Carver', 1981, 23, 176),
* ("Where I'm Calling From: Selected Stories", 'Raymond', 'Carver', 1989, 12, 526),
* ('White Noise', 'Don', 'DeLillo', 1985, 49, 320),
* ('Cannery Row', 'John', 'Steinbeck', 1945, 95, 181),
* ('Oblivion: Stories', 'David', 'Foster Wallace', 2004, 172, 329),
* ('Consider the Lobster', 'David', 'Foster Wallace', 2005, 92, 343);


1.CONCAT:
        SELECT CONCAT(author_fname,' ', author_lname) AS author_name FROM books;
* 2.SUBSTRING
        SELECT SUBSTRING('Hello World', 1, 4);
        SELECT SUBSTRING(title, 1, 10) AS 'short title' FROM books;


3.REPLACE:
        SELECT REPLACE('Hello World', 'Hell', '%$#@');
        SELECT REPLACE(title, 'e ', '3') FROM books;


4.REVERSE:
        SELECT REVERSE('meow meow');
* SELECT REVERSE(author_fname) FROM books;




5.CHAR_LENGTH:
        SELECT CHAR_LENGTH('Hello World');
* SELECT CHAR_LENGTH(title) as length, title FROM books;




6.UPPER & LOWER:
        SELECT CONCAT('MY FAVORITE BOOK IS ', UPPER(title)) FROM books;
* SELECT CONCAT('MY FAVORITE BOOK IS ', LOWER(title)) FROM books;






–REFINING SELECTIONS


1.DISTINCT:
        SELECT DISTINCT author_lname FROM books;
        SELECT DISTINCT author_fname, author_lname FROM books;


2.ORDER BY:
        SELECT * FROM books
* ORDER BY author_lname DESC;
*  
* SELECT * FROM books
* ORDER BY released_year;




3.LIMIT:
        SELECT * FROM books LIMIT 1;
* * SELECT title, released_year FROM books
* ORDER BY released_year DESC LIMIT 5;
* 

4.LIKE:
        SELECT title, author_fname, author_lname, pages
* FROM books
* WHERE author_fname LIKE '%da%';
*  
* SELECT title, author_fname, author_lname, pages
* FROM books
* WHERE title LIKE '%:%';


–AGGREGATE FUNCTIONS


1.COUNT:
        SELECT COUNT(*) FROM books;
SELECT COUNT(author_lname) FROM books;




2.GROUP BY:
        SELECT author_lname, COUNT(*)
* FROM books
* GROUP BY author_lname;
* *  
* SELECT
*    author_lname, COUNT(*) AS books_written
* FROM
*    books
* GROUP BY author_lname
* ORDER BY books_written DESC;




3.MIN MAX:
        SELECT MAX(pages) FROM books;
* SELECT MIN(author_lname) FROM books;




4.SUBQUERY:
        SELECT title, pages FROM books
* WHERE pages = (SELECT MAX(pages) FROM books);
*  
* SELECT MIN(released_year) FROM books;
*  
* SELECT title, released_year FROM books
* WHERE released_year = (SELECT MIN(released_year) FROM books);




5.SUM:
        SELECT SUM(pages) FROM books;
*  
*  
* SELECT author_lname, COUNT(*), SUM(pages)
* FROM books
* GROUP BY author_lname;




6.AVG:
        SELECT AVG(pages) FROM books;
*  
* SELECT AVG(released_year) FROM books;
*  
* SELECT
*    released_year,
*    AVG(stock_quantity),
*    COUNT(*) FROM books
* GROUP BY released_year;




–REVISTING DATATYPES:


1.DATE AND TIME:
        CREATE TABLE people (
*         name VARCHAR(100),
*    birthdate DATE,
*    birthtime TIME,
*    birthdt DATETIME
* );
*  
* INSERT INTO people (name, birthdate, birthtime, birthdt)
* VALUES ('Elton', '2000-12-25', '11:00:00', '2000-12-25 11:00:00');
*  
* INSERT INTO people (name, birthdate, birthtime, birthdt)
* VALUES ('Lulu', '1985-04-11', '9:45:10', '1985-04-11 9:45:10');
*  
* INSERT INTO people (name, birthdate, birthtime, birthdt)
* VALUES ('Juan', '2020-08-15', '23:59:00', '2020-08-15 23:59:00');




2.CURRENT DATE AND TIME:


        SELECT CURTIME();
*  
* SELECT CURDATE();
*  
* SELECT NOW();
*  
* INSERT INTO people (name, birthdate, birthtime, birthdt)
* VALUES ('Hazel', CURDATE(), CURTIME(), NOW());


SELECT
*    birthdt,
*    MONTH(birthdt),
*    DAY(birthdt),
*    HOUR(birthdt),
*    MINUTE(birthdt)
* FROM people;
        
* SELECT birthdate, DATE_FORMAT(birthdate, '%a %b %D') FROM people;
*  








–CONSTRAINTS AND ALTER TABLE  \\RULES FOR DATA


1.UNIQUE CONSTRAINTS


* CREATE TABLE contacts (
name VARCHAR(100) NOT NULL,
*        phone VARCHAR(15) NOT NULL UNIQUE
* );
*  
* INSERT INTO contacts (name, phone)
* VALUES ('billybob', '8781213455');
*  
* -- This insert would result in an error:
* INSERT INTO contacts (name, phone)
* VALUES ('billybob', '8781213455');


2.CHECK 


        CREATE TABLE users (
*    username VARCHAR(20) NOT NULL,
*    age INT CHECK (age > 0)
* );
*  
* CREATE TABLE palindromes (
*  word VARCHAR(100) CHECK(REVERSE(word) = word)
* )


3.NAMED


        CREATE TABLE users2 (
*    username VARCHAR(20) NOT NULL,
*    age INT,
*    CONSTRAINT age_not_negative CHECK (age >= 0)
* );
*  
* CREATE TABLE palindromes2 (
*  word VARCHAR(100),
*  CONSTRAINT word_is_palindrome CHECK(REVERSE(word) = word)
* );


4.Multiple columns


        CREATE TABLE companies (
*    name VARCHAR(255) NOT NULL,
*    address VARCHAR(255) NOT NULL,
*    CONSTRAINT name_address UNIQUE (name , address)
* );
*  
* CREATE TABLE houses (
*  purchase_price INT NOT NULL,
*  sale_price INT NOT NULL,
*  CONSTRAINT sprice_gt_pprice CHECK(sale_price >= purchase_price)
* );




5.adding columns \\ALTER TABLE


        ALTER TABLE companies
* ADD COLUMN phone VARCHAR(15);
*  
* ALTER TABLE companies
* ADD COLUMN employee_count INT NOT NULL DEFAULT 1;


6.drop column


        ALTER TABLE companies DROP COLUMN phone;


7.RENAMING TABLE


        RENAME TABLE companies to suppliers;


* ALTER TABLE suppliers RENAME TO companies;


* ALTER TABLE companies
* RENAME COLUMN name TO company_name;




8.modifying column
        
* ALTER TABLE companies
* MODIFY company_name VARCHAR(100) DEFAULT 'unknown';


* ALTER TABLE suppliers
* CHANGE business biz_name VARCHAR(50);


9.add or drop constraints
 
        ALTER TABLE houses
* ADD CONSTRAINT positive_pprice CHECK (purchase_price >= 0);


* ALTER TABLE houses DROP CONSTRAINT positive_pprice;


10.FOREIGN KEY


* CREATE TABLE customers (
*    id INT PRIMARY KEY AUTO_INCREMENT,
*    first_name VARCHAR(50),
*    last_name VARCHAR(50),
*    email VARCHAR(50)
* );
*  
* CREATE TABLE orders (
*    id INT PRIMARY KEY AUTO_INCREMENT,
*    order_date DATE,
*    amount DECIMAL(8,2),
*    customer_id INT,
*    FOREIGN KEY (customer_id) REFERENCES customers(id)
* );
*  
* INSERT INTO customers (first_name, last_name, email)
* VALUES ('Boy', 'George', 'george@gmail.com'),
*       ('George', 'Michael', 'gm@gmail.com'),
*       ('David', 'Bowie', 'david@gmail.com'),
*       ('Blue', 'Steele', 'blue@gmail.com'),
*       ('Bette', 'Davis', 'bette@aol.com');
*      
*      
* INSERT INTO orders (order_date, amount, customer_id)
* VALUES ('2016-02-10', 99.99, 1),
*       ('2017-11-11', 35.50, 1),
*       ('2014-12-12', 800.67, 2),
*       ('2015-01-03', 12.50, 2),
*       ('1999-04-11', 450.25, 5)


11.JOIN


        -- Our first inner join!
* SELECT * FROM customers
* JOIN orders ON orders.customer_id = customers.id;
*  
* SELECT first_name, last_name, order_date, amount FROM customers
* JOIN orders ON orders.customer_id = customers.id;
*  
* -- The order doesn't matter here:
* SELECT * FROM orders
* JOIN customers ON customers.id = orders.customer_id;




        SELECT
*    first_name, last_name, SUM(amount) AS total
* FROM
*    customers
*        JOIN
*    orders ON orders.customer_id = customers.id
* GROUP BY first_name , last_name
* ORDER BY total;


12.LEFT JOIN


        SELECT
*    first_name, last_name, order_date, amount
* FROM
*    customers
*        LEFT JOIN
*    orders ON orders.customer_id = customers.id;
*  
*  
* SELECT
*    order_date, amount, first_name, last_name
* FROM
*    orders
*        LEFT JOIN
*    customers ON orders.customer_id = customers.id;
        


SELECT
*    first_name,
*    last_name,
*    IFNULL(SUM(amount), 0) AS money_spent
* FROM
*    customers
*        LEFT JOIN
*    orders ON customers.id = orders.customer_id
* GROUP BY first_name , last_name;




13.RIGHT JOIN


        SELECT
*    first_name, last_name, order_date, amount
* FROM
*    customers
*        RIGHT JOIN
*    orders ON customers.id = orders.customer_id;


14.ON DELETE CASCADE
        CREATE TABLE customers (
*    id INT PRIMARY KEY AUTO_INCREMENT,
*    first_name VARCHAR(50),
*    last_name VARCHAR(50),
*    email VARCHAR(50)
* );
*  
* CREATE TABLE orders (
*    id INT PRIMARY KEY AUTO_INCREMENT,
*    order_date DATE,
*    amount DECIMAL(8 , 2 ),
*    customer_id INT,
*    FOREIGN KEY (customer_id)
*        REFERENCES customers (id)
*        ON DELETE CASCADE
* );


–MANY TO MANY


        CREATE TABLE reviewers (
*    id INT PRIMARY KEY AUTO_INCREMENT,
*    first_name VARCHAR(50) NOT NULL,
*    last_name VARCHAR(50) NOT NULL
* );
*  
* CREATE TABLE series (
*    id INT PRIMARY KEY AUTO_INCREMENT,
*    title VARCHAR(100),
*    released_year YEAR,
*    genre VARCHAR(100)
* );
*  
* CREATE TABLE reviews (
*    id INT PRIMARY KEY AUTO_INCREMENT,
*    rating DECIMAL(2 , 1 ),
*    series_id INT,
*    reviewer_id INT,
*    FOREIGN KEY (series_id)
*        REFERENCES series (id),
*    FOREIGN KEY (reviewer_id)
*        REFERENCES reviewers (id)
* );
*  
* INSERT INTO series (title, released_year, genre) VALUES
*    ('Archer', 2009, 'Animation'),
*    ('Arrested Development', 2003, 'Comedy'),
*    ("Bob's Burgers", 2011, 'Animation'),
*    ('Bojack Horseman', 2014, 'Animation'),
*    ("Breaking Bad", 2008, 'Drama'),
*    ('Curb Your Enthusiasm', 2000, 'Comedy'),
*    ("Fargo", 2014, 'Drama'),
*    ('Freaks and Geeks', 1999, 'Comedy'),
*    ('General Hospital', 1963, 'Drama'),
*    ('Halt and Catch Fire', 2014, 'Drama'),
*    ('Malcolm In The Middle', 2000, 'Comedy'),
*    ('Pushing Daisies', 2007, 'Comedy'),
*    ('Seinfeld', 1989, 'Comedy'),
*    ('Stranger Things', 2016, 'Drama');
* * * INSERT INTO reviewers (first_name, last_name) VALUES
*    ('Thomas', 'Stoneman'),
*    ('Wyatt', 'Skaggs'),
*    ('Kimbra', 'Masters'),
*    ('Domingo', 'Cortes'),
*    ('Colt', 'Steele'),
*    ('Pinkie', 'Petit'),
*    ('Marlon', 'Crafford');
*   
* * INSERT INTO reviews(series_id, reviewer_id, rating) VALUES
*    (1,1,8.0),(1,2,7.5),(1,3,8.5),(1,4,7.7),(1,5,8.9),
*    (2,1,8.1),(2,4,6.0),(2,3,8.0),(2,6,8.4),(2,5,9.9),
*    (3,1,7.0),(3,6,7.5),(3,4,8.0),(3,3,7.1),(3,5,8.0),
*    (4,1,7.5),(4,3,7.8),(4,4,8.3),(4,2,7.6),(4,5,8.5),
*    (5,1,9.5),(5,3,9.0),(5,4,9.1),(5,2,9.3),(5,5,9.9),
*    (6,2,6.5),(6,3,7.8),(6,4,8.8),(6,2,8.4),(6,5,9.1),
*    (7,2,9.1),(7,5,9.7),
*    (8,4,8.5),(8,2,7.8),(8,6,8.8),(8,5,9.3),
*    (9,2,5.5),(9,3,6.8),(9,4,5.8),(9,6,4.3),(9,5,4.5),
*    (10,5,9.9),
*    (13,3,8.0),(13,4,7.2),
*    (14,2,8.5),(14,3,8.9),(14,4,8.9);
* * –VIEWS:


1. CREATE VIEW
-- INSTEAD OF TYPING THIS QUERY ALL THE TIME...
* SELECT
*    title, released_year, genre, rating, first_name, last_name
* FROM
*    reviews
*        JOIN
*    series ON series.id = reviews.series_id
*        JOIN
*    reviewers ON reviewers.id = reviews.reviewer_id;
*  
* -- WE CAN CREATE A VIEW:
* CREATE VIEW full_reviews AS
* SELECT title, released_year, genre, rating, first_name, last_name FROM reviews
* JOIN series ON series.id = reviews.series_id
* JOIN reviewers ON reviewers.id = reviews.reviewer_id;
*  
* -- NOW WE CAN TREAT THAT VIEW AS A VIRTUAL TABLE
* -- (AT LEAST WHEN IT COMES TO SELECTING)
* SELECT * FROM full_reviews;


(2).REPLACE/ ALTER VIEW:
        CREATE VIEW ordered_series AS
* SELECT * FROM series ORDER BY released_year;
*  
* CREATE OR REPLACE VIEW ordered_series AS
* SELECT * FROM series ORDER BY released_year DESC;
*  
* ALTER VIEW ordered_series AS
* SELECT * FROM series ORDER BY released_year;
*  
* DROP VIEW ordered_series;


(3).HAVING


        SELECT
*    title,
*    AVG(rating),
*    COUNT(rating) AS review_count
* FROM full_reviews
* GROUP BY title HAVING COUNT(rating) > 1;


(4).WITH ROLLUP


        SELECT
*    title, AVG(rating)
* FROM
*    full_reviews
* GROUP BY title WITH ROLLUP;
* (5)modes


        -- To View Modes:
* SELECT @@GLOBAL.sql_mode;
* SELECT @@SESSION.sql_mode;
*  
* -- To Set Them:
* SET GLOBAL sql_mode = 'modes';
* SET SESSION sql_mode = 'modes';










–WINDOW FUNCTION:


        CREATE TABLE employees (
*    emp_no INT PRIMARY KEY AUTO_INCREMENT,
*    department VARCHAR(20),
*    salary INT
* );
*  
* INSERT INTO employees (department, salary) VALUES
* ('engineering', 80000),
* ('engineering', 69000),
* ('engineering', 70000),
* ('engineering', 103000),
* ('engineering', 67000),
* ('engineering', 89000),
* ('engineering', 91000),
* ('sales', 59000),
* ('sales', 70000),
* ('sales', 159000),
* ('sales', 72000),
* ('sales', 60000),
* ('sales', 61000),
* ('sales', 61000),
* ('customer service', 38000),
* ('customer service', 45000),
* ('customer service', 61000),
* ('customer service', 40000),
* ('customer service', 31000),
* ('customer service', 56000),
* ('customer service', 55000);
* * 1.OVER: 
*  
* SELECT emp_no, department, salary, AVG(salary) OVER() FROM employees;
*  
* SELECT
*    emp_no,
*    department,
*    salary,
*    MIN(salary) OVER(),
*    MAX(salary) OVER()
* FROM employees;


2.PARTITION BY:


        SELECT
*    emp_no,
*    department,
*    salary,
*    AVG(salary) OVER(PARTITION BY department) AS dept_avg,
*    AVG(salary) OVER() AS company_avg
* FROM employees;
*  
* SELECT
*    emp_no,
*    department,
*    salary,
*    COUNT(*) OVER(PARTITION BY department) as dept_count
* FROM employees;
*  
* SELECT
*    emp_no,
*    department,
*    salary,
*    SUM(salary) OVER(PARTITION BY department) AS dept_payroll,
*    SUM(salary) OVER() AS total_payroll
* FROM employees;




3.ORDER BY
        
SELECT
*    emp_no,
*    department,
*    salary,
*    MIN(salary) OVER(PARTITION BY department ORDER BY salary DESC) as rolling_min
* FROM employees;


4.RANK DENSE_RANK ROW_NUMBER


        SELECT
*    emp_no,
*    department,
*    salary,
*    ROW_NUMBER() OVER(PARTITION BY department ORDER BY SALARY DESC) as dept_row_number,
*    RANK() OVER(PARTITION BY department ORDER BY SALARY DESC) as dept_salary_rank,
*    RANK() OVER(ORDER BY salary DESC) as overall_rank,
*    DENSE_RANK() OVER(ORDER BY salary DESC) as overall_dense_rank,
*    ROW_NUMBER() OVER(ORDER BY salary DESC) as overall_num
* FROM employees ORDER BY overall_rank;




5.NTILE


        SELECT
*    emp_no,
*    department,
*    salary,
*    NTILE(4) OVER(PARTITION BY department ORDER BY salary DESC) AS dept_salary_quartile,
*         NTILE(4) OVER(ORDER BY salary DESC) AS salary_quartile
* FROM employees;






6.FIRSTVALUE


        SELECT
*    emp_no,
*    department,
*    salary,
*    FIRST_VALUE(emp_no) OVER(PARTITION BY department ORDER BY salary DESC) as highest_paid_dept,
*    FIRST_VALUE(emp_no) OVER(ORDER BY salary DESC) as highest_paid_overall
* FROM employees;


7.LEAD AND LAG


* SELECT
*    emp_no,
*    department,
*    salary,
*    salary - LAG(salary) OVER(ORDER BY salary DESC) as salary_diff
* FROM employees;
*  
* SELECT
*    emp_no,
*    department,
*    salary,
*    salary - LAG(salary) OVER(PARTITION BY department ORDER BY salary DESC) as dept_salary_diff
* FROM employees;




INSTAGRAM CLONE:


1.USER SCHEMA


        CREATE TABLE users (
*    id INTEGER AUTO_INCREMENT PRIMARY KEY,
*    username VARCHAR(255) UNIQUE NOT NULL,
*    created_at TIMESTAMP DEFAULT NOW()
* );


2.PHOTOS SCHEMA


        CREATE TABLE photos (
*    id INTEGER AUTO_INCREMENT PRIMARY KEY,
*    image_url VARCHAR(255) NOT NULL,
*    user_id INTEGER NOT NULL,
*    created_at TIMESTAMP DEFAULT NOW(),
*    FOREIGN KEY(user_id) REFERENCES users(id)
* );


3.COMMENTS SCHEMA


        CREATE TABLE comments (
*    id INTEGER AUTO_INCREMENT PRIMARY KEY,
*    comment_text VARCHAR(255) NOT NULL,
*    photo_id INTEGER NOT NULL,
*    user_id INTEGER NOT NULL,
*    created_at TIMESTAMP DEFAULT NOW(),
*    FOREIGN KEY(photo_id) REFERENCES photos(id),
*    FOREIGN KEY(user_id) REFERENCES users(id)
* );


4.LIKES SCHEMA


        CREATE TABLE likes (
*    user_id INTEGER NOT NULL,
*    photo_id INTEGER NOT NULL,
*    created_at TIMESTAMP DEFAULT NOW(),
*    FOREIGN KEY(user_id) REFERENCES users(id),
*    FOREIGN KEY(photo_id) REFERENCES photos(id),
*    PRIMARY KEY(user_id, photo_id)
* );


5.FOLLOW SCHEMA


        CREATE TABLE follows (
*    follower_id INTEGER NOT NULL,
*    followee_id INTEGER NOT NULL,
*    created_at TIMESTAMP DEFAULT NOW(),
*    FOREIGN KEY(follower_id) REFERENCES users(id),
*    FOREIGN KEY(followee_id) REFERENCES users(id),
*    PRIMARY KEY(follower_id, followee_id)
* );


6.HASHTAG SCHEMA


        CREATE TABLE tags (
*  id INTEGER AUTO_INCREMENT PRIMARY KEY,
*  tag_name VARCHAR(255) UNIQUE,
*  created_at TIMESTAMP DEFAULT NOW()
* );
* CREATE TABLE photo_tags (
*    photo_id INTEGER NOT NULL,
*    tag_id INTEGER NOT NULL,
*    FOREIGN KEY(photo_id) REFERENCES photos(id),
*    FOREIGN KEY(tag_id) REFERENCES tags(id),
*    PRIMARY KEY(photo_id, tag_id)
* );


Q.1 FIND OUT MOST REGISTRATION DAY


        SELECT
*    DAYNAME(created_at) AS day,
*    COUNT(*) AS total
* FROM users
* GROUP BY day
* ORDER BY total DESC LIMIT 2;


Q-2 . FIND USER WHO NEVER POSTED A PHOTO 


        SELECT username
* FROM users
* LEFT JOIN photos
*    ON users.id = photos.user_id
* WHERE photos.id IS NULL;


Q.3 AVERAGE POST PER USER


        SELECT (SELECT Count(*)
*        FROM   photos) / (SELECT Count(*)
*                          FROM   users) AS avg;


Q.4 TOP FIVE POPULAR HASHTAGS USED 


        SELECT tags.tag_name,
*       Count(*) AS total
* FROM   photo_tags
*       JOIN tags
*         ON photo_tags.tag_id = tags.id
* GROUP  BY tags.id
* ORDER  BY total DESC
* LIMIT  5;


Q.5 USER WHO LIKED ALL POSTS ON OURWEBSITE


        SELECT username,
*       Count(*) AS num_likes
* FROM   users
*       INNER JOIN likes
*               ON users.id = likes.user_id
* GROUP  BY likes.user_id
* HAVING num_likes = (SELECT Count(*)
*                    FROM   photos);



efjueifjhefuinjhefiehfwuiefjh